{"version":3,"sources":["js/constants.js","js/markupImages.js","js/apiService.js"],"names":["fetchImagesBtn","document","querySelector","searchForm","inputField","imagesList","alertPopup","isAlertVisible","markupImages","images","map","webformatURL","tags","likes","views","comments","downloads","join","console","log","value","page","limit","nameOfImage","buttonTextAmendOnPageInctease","textContent","totalPages","toggleAlertPopup","fetchImages","params","URLSearchParams","fetch","then","response","ok","Error","status","json","renderImages","markup","insertAdjacentHTML","classList","add","setTimeout","remove","clearContent","result","innerHTML","countryList","addEventListener","Math","ceil","total","dir","hits","catch","error","alert"],"mappings":";AAAA,aAYA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,QAAA,WAAA,QAAA,WAAA,QAAA,WAAA,QAAA,WAAA,QAAA,oBAAA,EAVA,IAAMA,EAAiBC,SAASC,cAAc,QAU9C,QAAA,eAAA,EATA,IAAMC,EAAaF,SAASC,cAAc,gBAS1C,QAAA,WAAA,EARA,IAAME,EAAaH,SAASC,cAAc,kBAQ1C,QAAA,WAAA,EAPA,IAAMG,EAAaJ,SAASC,cAAc,YAO1C,QAAA,WAAA,EANA,IAAMI,EAAaL,SAASC,cAAc,UAM1C,QAAA,WAAA,EAJA,IAAIK,GAAiB,EAIrB,QAAA,eAAA;;ACZA,aACO,SAASC,EAAaC,GAElBA,OAAAA,EAAOC,IAAI,SAA+D,GAA5DC,IAAAA,EAAAA,EAAAA,aAAcC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,UAExDL,MAAAA,wCAAAA,OAAAA,EAAoBC,SAAAA,OAAAA,EAKzBC,kHAAAA,OAAAA,EAIAC,kGAAAA,OAAAA,EAIAC,+FAAAA,OAAAA,EAIAC,sGAAAA,OAAAA,EAlBA,kCAuBCC,KAAK,IACb,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA;;AC5BD,aAEA,IAAA,EAAA,QAAA,eACA,EAAA,QAAA,kBAIAC,QAAQC,IAAIf,EAAWgB,WAAAA,OACvBF,QAAQC,IAAId,EAAZ,YAEA,IAAIE,GAAiB,EAEjBc,EAAO,EAEPC,EAAQ,GAERC,EAAc,GAgDlB,SAASC,IAQHH,GAPJA,GAAQ,EACRH,QAAQC,IAAIE,GAGRA,EAAO,IACMI,EAAAA,eAAAA,YAAc,+BAE3BJ,EAAOK,WACFC,OAAAA,IAyBX,SAASC,IACDC,IAAAA,EAAS,IAAIC,gBAAgB,CAC5BP,EAAAA,EACGF,KAAAA,EACIC,SAAAA,EACE,WAAA,UAITS,OAAAA,MAAyEF,mEAAAA,OAAAA,IAC7EG,KAAK,SAACC,GACD,IAACA,EAASC,GACN,MAAA,IAAIC,MAAMF,EAASG,QAIpBH,OAAAA,EAASI,SAkCtB,SAASC,EAAalB,GACdmB,IAAAA,GAAS,EAAanB,EAAAA,cAAAA,GACjBoB,EAAAA,WAAAA,mBAAmB,YAAaD,GAG7C,SAASZ,IACHpB,IAGJA,GAAiB,EACNkC,EAAAA,WAAAA,UAAUC,IAAI,cACzBC,WAAW,WACEF,EAAAA,WAAAA,UAAUG,OAAO,cAC5BrC,GAAiB,GAChB,MAGL,SAASsC,IAEPC,OAAOC,UAAY,GACnBC,YAAYD,UAAY,GApJ1B/C,EAAeiD,eAAAA,iBAAiB,QAAS,WAOlC7C,EAAWgB,WAAAA,OAKdG,EAAcnB,EAAWgB,WAAAA,MACzBF,QAAQC,IAAII,GAMdK,IACGI,KAAK,SAACvB,GACCiB,IAAAA,EAAawB,KAAKC,KAAK1C,EAAO2C,MAAQ9B,GAC5CJ,QAAQC,IAAIO,GACZR,QAAQmC,IAAI5C,EAAO6C,MACnBhB,EAAa7B,EAAO6C,MAEpB9B,MAcD+B,MAAM,SAACC,GAAUtC,OAAAA,QAAQC,IAAIqC,MAhC9BC,MAAM","file":"apiService.039e7433.js","sourceRoot":"../src","sourcesContent":["'use strict'\n\nconst fetchImagesBtn = document.querySelector(\".btn\");\nconst searchForm = document.querySelector(\"#search-form\")\nconst inputField = document.querySelector('[name=\"query\"]')\nconst imagesList = document.querySelector(\".gallery\");\nconst alertPopup = document.querySelector(\".alert\");\n//let nameOfImage = \"\";\nlet isAlertVisible = false;\n// Controls the group number\n// let page = 1;\n// // Controls the number of items in the group\n// let limit = 12;\n\nexport { fetchImagesBtn, searchForm, inputField, imagesList, alertPopup, isAlertVisible };","'use strict'\nexport function markupImages(images) { //формирует разметку карточки\n    // console.log(images);\n    return images.map(({ webformatURL, tags, likes, views, comments, downloads }) => {\n        return `<div class=\"photo-card\">\n  <img src=${webformatURL} alt=${tags} />\n\n  <div class=\"stats\">\n    <p class=\"stats-item\">\n      <i class=\"material-icons\">thumb_up</i>\n      ${likes}\n    </p>\n    <p class=\"stats-item\">\n      <i class=\"material-icons\">visibility</i>\n      ${views}\n    </p>\n    <p class=\"stats-item\">\n      <i class=\"material-icons\">comment</i>\n      ${comments}\n    </p>\n    <p class=\"stats-item\">\n      <i class=\"material-icons\">cloud_download</i>\n      ${downloads}\n    </p>\n  </div>\n</div>`;\n    })\n        .join(\"\");\n};","'use strict'\n\nimport { fetchImagesBtn, searchForm, inputField, imagesList, alertPopup } from './constants';\nimport { markupImages } from './markupImages';\n\n\n\nconsole.log(inputField.value)\nconsole.log(imagesList);\n\nlet isAlertVisible = false;\n// Controls the group number\nlet page = 1;\n// Controls the number of items in the group\nlet limit = 12;\n//select name of the image\nlet nameOfImage = \"\";\n\n\n\nfetchImagesBtn.addEventListener(\"click\", () => {\n  //clearContent();\n\n  // Check the end of the collection to display an alert\n  // if (page > totalPages) {\n  //   return toggleAlertPopup();\n  // }\n  if (!inputField.value) {\n    alert('Введите название изображения')\n    return\n  }\n  else {\n    nameOfImage = inputField.value;\n    console.log(nameOfImage)\n    // localStorage.setItem('pictureName', inputField.value);\n    // nameOfImage = localStorage.getItem('pictureName');\n    // console.log(localStorage);\n  }\n\n  fetchImages()\n    .then((images) => {\n      const totalPages = Math.ceil(images.total / limit); //get quantity of pages in the images'collection\n      console.log(totalPages);\n      console.dir(images.hits); //при обращении к значению объекта hits => Array, св-во length сохраняется\n      renderImages(images.hits); //получние доступа к Массиву изображений в Объекте Json\n\n      buttonTextAmendOnPageInctease()\n\n      // Increase the group number\n      // page += 1;\n      // console.log(page);\n\n      // Replace button text after first request\n      // if (page > 1) {\n      //   fetchImagesBtn.textContent = \"Показать больше изображений\";\n      // }\n      // if (page > totalPages) {\n      //   return toggleAlertPopup();\n      // }\n    })\n    .catch((error) => console.log(error));\n});\n//=================================\n//update text of button when page inrease\nfunction buttonTextAmendOnPageInctease() {\n  page += 1;\n  console.log(page);\n\n  // Replace button text after first request\n  if (page > 1) {\n    fetchImagesBtn.textContent = \"Показать больше изображений\";\n  }\n  if (page > totalPages) {\n    return toggleAlertPopup();\n  }\n}\n//===============================================\n// fetchImages()\n//   .then((images) => {\n//     const totalPages = Math.ceil(images.total / limit);\n//     console.log(totalPages);\n//     console.dir(images.hits); //при обращении к значению объекта hits => Array, св-во length сохраняется\n//     renderImages(images.hits);\n\n//     // Increase the group number\n//     page += 1;\n//     console.log(page);\n\n//     // Replace button text after first request\n//     if (page > 1) {\n//       fetchImagesBtn.textContent = \"Показать больше изображений\";\n//     }\n//     if (page > totalPages) {\n//       return toggleAlertPopup();\n//     }\n//   })\n//   .catch((error) => console.log(error));\n//=========================\nfunction fetchImages() {\n  const params = new URLSearchParams({\n    \"q\": nameOfImage,\n    \"page\": page,\n    \"per_page\": limit,\n    \"image_type\": \"photo\",\n  });\n\n  //https://pixabay.com/api/?key=22969480-c3583c2b4b1ca4646f49ed52f${params}\n  return fetch(`https://pixabay.com/api/?key=22969480-c3583c2b4b1ca4646f49ed52f&${params}`)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(response.status);\n      }\n      //console.log(response);\n      // return Array.from(response.json()); //при преобразовании возвращаемого Json-объекта с пом. Array.from в массив \"теряется\" св-во length, length = 0;\n      return response.json();\n    }\n    );\n}\n\n// function markupImages(images) { //формирует разметку карточки\n//   // console.log(images);\n//   return images.map(({ webformatURL, tags, likes, views, comments, downloads }) => {\n//     return `<div class=\"photo-card\">\n//   <img src=${webformatURL} alt=${tags} />\n\n//   <div class=\"stats\">\n//     <p class=\"stats-item\">\n//       <i class=\"material-icons\">thumb_up</i>\n//       ${likes}\n//     </p>\n//     <p class=\"stats-item\">\n//       <i class=\"material-icons\">visibility</i>\n//       ${views}\n//     </p>\n//     <p class=\"stats-item\">\n//       <i class=\"material-icons\">comment</i>\n//       ${comments}\n//     </p>\n//     <p class=\"stats-item\">\n//       <i class=\"material-icons\">cloud_download</i>\n//       ${downloads}\n//     </p>\n//   </div>\n// </div>`;\n//   })\n//     .join(\"\");\n// };\n\nfunction renderImages(value) {\n  const markup = markupImages(value)\n  imagesList.insertAdjacentHTML(\"beforeend\", markup);\n};\n\nfunction toggleAlertPopup() {\n  if (isAlertVisible) {\n    return;\n  }\n  isAlertVisible = true;\n  alertPopup.classList.add(\"is-visible\");\n  setTimeout(() => {\n    alertPopup.classList.remove(\"is-visible\");\n    isAlertVisible = false;\n  }, 4000);\n};\n\nfunction clearContent() {\n  // input.value = \"\";\n  result.innerHTML = \"\";\n  countryList.innerHTML = '';\n};\n\n\n//=================================================================\n// function markupImages(images) { //формирует разметку карточки\n//     // console.log(images);\n//   if (images.isArray) {\n//    return images.map(({ likes, views, comments, downloads, id }) => {\n//     return `<div class=\"photo-card\">\n//   <img src=${webformatURL} alt=${tags} />\n\n//   <div class=\"stats\">\n//     <p class=\"stats-item\">\n//       <i class=\"material-icons\">thumb_up</i>\n//       ${likes}\n//     </p>\n//     <p class=\"stats-item\">\n//       <i class=\"material-icons\">visibility</i>\n//       ${views}\n//     </p>\n//     <p class=\"stats-item\">\n//       <i class=\"material-icons\">comment</i>\n//       ${comments}\n//     </p>\n//     <p class=\"stats-item\">\n//       <i class=\"material-icons\">image_id</i>\n//       ${id}\n//     </p>\n//     <p class=\"stats-item\">\n//       <i class=\"material-icons\">cloud_download</i>\n//       ${downloads}\n//     </p>\n//   </div>\n// </div>`;\n//     })\n//     .join(\"\");\n//   }\n//   // return \"input of .map() is not array\";\n// };\n\n// function markupImages(images) { //формирует разметку карточки\n//     console.log(images);\n//   return images.map(({ likes, views, comments, downloads, id }) => {\n//     return `<div class=\"photo-card\">\n//   <img src=${webformatURL} alt=${tags} />\n\n//   <div class=\"stats\">\n//     <p class=\"stats-item\">\n//       <i class=\"material-icons\">thumb_up</i>\n//       ${likes}\n//     </p>\n//     <p class=\"stats-item\">\n//       <i class=\"material-icons\">visibility</i>\n//       ${views}\n//     </p>\n//     <p class=\"stats-item\">\n//       <i class=\"material-icons\">comment</i>\n//       ${comments}\n//     </p>\n//     <p class=\"stats-item\">\n//       <i class=\"material-icons\">image_id</i>\n//       ${id}\n//     </p>\n//     <p class=\"stats-item\">\n//       <i class=\"material-icons\">cloud_download</i>\n//       ${downloads}\n//     </p>\n\n//   </div>\n// </div>`;\n//     })\n//     .join(\"\");\n// }\n// function renderImages(images) {\n//   const markup = markupImages(images)\n//   imagesList.insertAdjacentHTML(\"beforeend\", markup);\n// }"]}